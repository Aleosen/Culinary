import { useState } from "react";
import TipTapRedactor from "../../components/ui/Redactor/TipTapRedactor";
import { useForm, Controller } from 'react-hook-form';

export default function RecipeForm() {
  const { control, handleSubmit, register, formState: { errors } } = useForm();
  const [preview, setPreview] = useState("");

  const validTypes = ["image/jpeg", "image/png"];
  const maxSize = 5 * 1024 * 1024;

  const handleFileChange = (e, onChange) => {
    const file = e.target.files[0];
    if (!file) return;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!validTypes.includes(file.type)) {
      e.target.value = "";
      return alert("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç");
    }

    if (file.size > maxSize) {
      e.target.value = "";
      return alert("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π");
    }

    // –î–ª—è –ø—Ä–µ–≤—å—é
    if (file.type.startsWith("image/")) {
      const reader = new FileReader();
      reader.onloadend = () => setPreview(reader.result);
      reader.readAsDataURL(file);
    }

    // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∞–π–ª –≤ react-hook-form
    onChange(file);
  };

  const onSubmit = (data) => {
    console.log("Form Data:", data);
    // –ó–¥–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="lg:w-3xl mx-auto shadow-lg p-2 lg:p-20">
      <h1 className="text-3xl mb-5">–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç</h1>

      {/* –ü–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è */}
      <div className="flex flex-col mb-10">
        <label htmlFor="recipeName" className="mb-1">
          –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞<span className="text-red-600">*</span>
        </label>
        <input
          id="recipeName"
          type="text"
          placeholder="–°–∞–ª–∞—Ç —Ü–µ–∑–∞—Ä—å..."
          className="border rounded-lg py-2 px-4"
          {...register("title", { required: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ" })}
        />
        {errors.title && (
          <span className="text-red-600 text-sm">{errors.title.message}</span>
        )}
      </div>

      {/* –ü–æ–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ */}
      <div className="mb-10">
        <label className="mb-1">
          –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±–ª—é–¥–∞<span className="text-red-600">*</span>
        </label>
        <Controller
          name="image"
          control={control}
          rules={{ required: "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" }}
          render={({ field, fieldState }) => (
            <div className="border border-dashed min-h-32 p-10 rounded-2xl flex flex-col items-center justify-center">
              <div className="ml-13">
                <label htmlFor="upload" className="cursor-pointer mr-2">
                  üì∑
                </label>
                <input
                  type="file"
                  accept="image/*"
                  id="upload"
                  className="hover:cursor-pointer"
                  onChange={(e) => handleFileChange(e, field.onChange)}
                />
              </div>
              {fieldState.error && (
                <span className="text-red-600 text-sm">
                  {fieldState.error.message}
                </span>
              )}
              {preview && (
                <img
                  src={preview}
                  alt="Preview"
                  className="mt-4 max-w-[300px] rounded-xl border border-black"
                />
              )}
            </div>
          )}
        />
      </div>

      {/* –†–µ–¥–∞–∫—Ç–æ—Ä */}
      <div className="mb-10">
        <label className="mb-1">
          –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞<span className="text-red-600">*</span>
        </label>
        <Controller
          name="content"
          control={control}
          rules={{ required: "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞" }}
          render={({ field, fieldState }) => (
            <>
              <TipTapRedactor
                value={field.value}
                onChange={field.onChange}
              />
              {fieldState.error && (
                <span className="text-red-600 text-sm">
                  {fieldState.error.message}
                </span>
              )}
            </>
          )}
        />
      </div>

      <button
        type="submit"
        className="w-full bg-orange-500 text-white py-3 rounded-lg hover:bg-orange-600 transition-colors"
      >
        –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç üç≥
      </button>
    </form>
  );
}